Entity Associations
	provide mapping metadata for various associations
	Map collections of entity types
	understand bidirectional n unidirectional relationships
	
Relationship/association 
Owning Entity/Non Owning Entity - JoiColumn /JoinTable
	Owning entity will have foreign key column
	Above statement is true only for Bidirectional but it is not true in Unidirectional
Source Object/Target Object - one table column specified as foreign key on the other table, first is Target, second is the source

Entity Associations - reference from one entity to other
				    - mapped to underlying db tables 
1)One To One - one account has one set of credentials 
2)One To Many - one account has many txions
3)Many to one - from txions to account
4)Many to Many - multiple users can be associated with many accounts - like wife and husband

#1)Unidirectional One To One

User to credentials

user
	user_id
	name
	age
	crete_by
	create_date
	update_by
	update_date

credentials
	cred_id
	user_id
	username
	pwd

	here user to credentials - unidirectional ie relation only from user to cred not the other way around
	here cred has user id so source is cred and user is target entity
	
cascade=CascadeType.All mean when we persist cred entity , user entity also will be persisted.
@JoinColumn - specifies the foreign key column on the cred entity and also when u look at from the db side to get cred we need to pass userid for the join ie what it is

public class cred {
...
@OneToOne(cascade=CascadeType.ALL)
@JoinColumn(name="user_id")

}

#2)One To One - Bi directional
	
if a table has foreign key then that table is source table and it will have @joinColumn

like above , but in the target as well, 
in target u specify how the target is mapped by in source on source variable

so owning entity - having fkey - will have joinColumn
   non owning entity - will have mappedBy 
     
	in Employee class
	..
	@OneToOne(mappedBy="employee"f)
	private EmpAddress empAddress;
	
	in EmpAddress class 
	....
	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.EAGER)
	@JoinColumn(name="emp_id")
	private Employee employee;
	
we should not specify joinColumn and cascade on the inverse side.only one join column side it should be mentioned
and also we need to maintain the addition on both sides
ie empaddress.setUser(userObj);
   userObj.setEmpadress(empaddressObj)
   save(credentials)
	
3.mappedBy:The field that owns the relationship. This
      * element is only specified on the inverse (non-owning)
      * side of the association.modify
modify
modify
